{"version":3,"sources":["component/Button.js","component/Input.js","component/ClearButton.js","component/App.js","serviceWorker.js","index.js"],"names":["Button","isOperator","val","isNaN","className","this","props","children","onClick","handleClick","Component","Input","ClearButton","handleClear","App","addToInput","setState","input","state","addDecimal","indexOf","addZeroToInput","clearInput","add","previousNumber","operator","subtract","multiply","divide","evaluate","currentNumber","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TAoBeA,G,wNAfXC,WAAa,SAAAC,GACT,OAAQC,MAAMD,IAAgB,MAARA,GAAuB,MAARA,G,uDAEhC,IAAD,OACJ,OACI,yBAAKE,UAAS,iBAAYC,KAAKJ,WAC9BI,KAAKC,MAAMC,UAAY,GAAK,YAE7BC,QAAS,kBAAK,EAAKF,MAAMG,YAAY,EAAKH,MAAMC,YAC3CF,KAAKC,MAAMC,c,GAVPG,cCUNC,G,6KARP,OACI,yBAAKP,UAAU,SACVC,KAAKC,MAAMC,c,GAJRG,cCWLE,G,6KAVF,IAAD,OACJ,OACI,yBAAKR,UAAU,YACfI,QAAS,WAAK,EAAKF,MAAMO,gBACpBR,KAAKC,MAAMC,c,GALFG,cC+IXI,E,kDAxIb,WAAYR,GAAO,IAAD,8BAChB,cAAMA,IASRS,WAAa,SAAAb,GACX,EAAKc,SAAS,CAACC,MAAO,EAAKC,MAAMD,MAAQf,KAXzB,EAclBiB,WAAa,SAAAjB,IAC0B,IAAlC,EAAKgB,MAAMD,MAAMG,QAAQ,MAC1B,EAAKJ,SAAS,CAACC,MAAO,EAAKC,MAAMD,MAAQf,KAhB3B,EAoBlBmB,eAAiB,SAAAnB,GACS,KAArB,EAAKgB,MAAMD,OACV,EAAKD,SAAS,CAACC,MAAO,EAAKC,MAAMD,MAAQf,KAtB7B,EA2BlBoB,WAAa,WACX,EAAKN,SAAS,CAACC,MAAO,MA5BN,EA+BlBM,IAAK,WACH,EAAKL,MAAMM,eAAiB,EAAKN,MAAMD,MACvC,EAAKD,SAAS,CAACC,MAAO,KACtB,EAAKC,MAAMO,SAAW,QAlCN,EAqClBC,SAAU,WACR,EAAKR,MAAMM,eAAiB,EAAKN,MAAMD,MACvC,EAAKD,SAAS,CAACC,MAAO,KACtB,EAAKC,MAAMO,SAAW,YAxCN,EA2ClBE,SAAW,WACT,EAAKT,MAAMM,eAAiB,EAAKN,MAAMD,MACvC,EAAKD,SAAS,CAACC,MAAO,KACtB,EAAKC,MAAMO,SAAW,YA9CN,EAiDlBG,OAAS,WACP,EAAKV,MAAMM,eAAiB,EAAKN,MAAMD,MACvC,EAAKD,SAAS,CAACC,MAAO,KACtB,EAAKC,MAAMO,SAAW,UApDN,EAwDlBI,SAAW,WACT,EAAKX,MAAMY,cAAgB,EAAKZ,MAAMD,MAEZ,SAAvB,EAAKC,MAAMO,SACZ,EAAKT,SAAS,CACZC,MAAMc,SAAS,EAAKb,MAAMM,gBAC1BO,SAAS,EAAKb,MAAMY,iBAIO,aAAvB,EAAKZ,MAAMO,SACjB,EAAKT,SAAS,CACZC,MAAMc,SAAS,EAAKb,MAAMM,gBAC1BO,SAAS,EAAKb,MAAMY,iBAKO,aAAvB,EAAKZ,MAAMO,SACjB,EAAKT,SAAS,CACZC,MAAMc,SAAS,EAAKb,MAAMM,gBAC1BO,SAAS,EAAKb,MAAMY,iBAIO,WAAvB,EAAKZ,MAAMO,UACjB,EAAKT,SAAS,CACZC,MAAMc,SAAS,EAAKb,MAAMM,gBAC1BO,SAAS,EAAKb,MAAMY,kBAjFxB,EAAKZ,MAAQ,CACXD,MAAM,GACNO,eAAe,GACfM,cAAc,GACdL,SAAS,IAPK,E,qDA2FhB,OAEE,yBAAKrB,UAAU,OAEb,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,YAAf,2BAGE,yBAAKA,UAAU,OACb,kBAAC,EAAD,KAAQC,KAAKa,MAAMD,QAErB,yBAAKb,UAAU,OACb,kBAAC,EAAD,CAAQK,YAAaJ,KAAKU,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaJ,KAAKU,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaJ,KAAKU,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaJ,KAAKuB,QAA1B,MAEF,yBAAKxB,UAAU,OACb,kBAAC,EAAD,CAAQK,YAAaJ,KAAKU,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaJ,KAAKU,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaJ,KAAKU,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaJ,KAAKsB,UAA1B,MAEF,yBAAKvB,UAAU,OACb,kBAAC,EAAD,CAAQK,YAAaJ,KAAKU,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaJ,KAAKU,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaJ,KAAKU,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaJ,KAAKkB,KAA1B,MAEF,yBAAKnB,UAAU,OACb,kBAAC,EAAD,CAAQK,YAAaJ,KAAKc,YAA1B,KACA,kBAAC,EAAD,CAAQV,YAAaJ,KAAKgB,gBAA1B,KACA,kBAAC,EAAD,CAAQZ,YAAaJ,KAAKwB,UAA1B,KACA,kBAAC,EAAD,CAAQpB,YAAaJ,KAAKqB,UAA1B,MAEF,yBAAKtB,UAAU,OACb,kBAAC,EAAD,CAAaS,YAAaR,KAAKiB,YAA/B,gB,GAhIMZ,aCEEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.73fa17d9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport './Button.css';\r\n\r\nclass Button extends Component{\r\n    isOperator = val =>{\r\n        return !isNaN(val) || val === \".\" || val === \"=\";\r\n    }\r\n    render(){\r\n        return(\r\n            <div className={`button ${this.isOperator\r\n            (this.props.children) ? \"\" : \"operator\"}`\r\n            }\r\n            onClick={()=> this.props.handleClick(this.props.children)}>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Button;\r\n\r\n","import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport './Input.css';\r\n\r\nclass Input extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"input\">\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Input;\r\n\r\n","import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport './ClearButton.css';\r\n\r\nclass ClearButton extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"clear-btn\"\r\n            onClick={()=>{this.props.handleClear()}}>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ClearButton;\r\n\r\n","import React,{Component} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Button from './Button';\nimport Input from './Input';\nimport ClearButton from './ClearButton';\n// import Button from './Button';\n// import ButtonPanel from './ButtonPanel';\n// import calculate from '../logic/calculate';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      input:\"\",\n      previousNumber:\"\",\n      currentNumber:\"\",\n      operator:\"\"\n    };\n  }\n  addToInput = val =>{\n    this.setState({input: this.state.input + val});\n  };\n\n  addDecimal = val=>{\n    if(this.state.input.indexOf(\".\")=== -1){\n      this.setState({input: this.state.input + val});\n    }\n  }\n\n  addZeroToInput = val =>{\n    if(this.state.input !== \"\"){\n        this.setState({input: this.state.input + val});\n    }\n  }\n\n\n  clearInput = () =>{\n    this.setState({input: \"\"});\n  }\n\n  add =() =>{\n    this.state.previousNumber = this.state.input;\n    this.setState({input: \"\"});\n    this.state.operator = \"plus\";\n  }\n\n  subtract =() =>{\n    this.state.previousNumber = this.state.input;\n    this.setState({input: \"\"});\n    this.state.operator = \"subtract\";\n  }\n\n  multiply = () =>{\n    this.state.previousNumber = this.state.input;\n    this.setState({input: \"\"});\n    this.state.operator = \"multiply\";\n  }\n\n  divide = ()=>{\n    this.state.previousNumber = this.state.input;\n    this.setState({input: \"\"});\n    this.state.operator = \"divide\";\n  }\n\n\n  evaluate = () =>{\n    this.state.currentNumber = this.state.input;\n\n    if(this.state.operator ===\"plus\"){\n      this.setState({\n        input:parseInt(this.state.previousNumber) + \n        parseInt(this.state.currentNumber)\n      });\n    }\n\n    else if(this.state.operator ===\"subtract\"){\n      this.setState({\n        input:parseInt(this.state.previousNumber) - \n        parseInt(this.state.currentNumber)\n      });\n    }\n\n    \n    else if(this.state.operator ===\"multiply\"){\n      this.setState({\n        input:parseInt(this.state.previousNumber) * \n        parseInt(this.state.currentNumber)\n      });\n    }\n\n    else if(this.state.operator ===\"divide\"){\n      this.setState({\n        input:parseInt(this.state.previousNumber) / \n        parseInt(this.state.currentNumber)\n      });\n    }\n    \n  }\n\n  render(){\n    return (\n        \n      <div className=\"App\">\n        \n        <div className=\"calc-wrapper\">\n        <div className=\"starting\">\n          MOODY-KNIGHT CALCULATOR\n        </div>\n          <div className=\"row\">\n            <Input>{this.state.input}</Input>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n            <Button handleClick={this.divide}>/</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n            <Button handleClick={this.multiply}>*</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n            <Button handleClick={this.add}>+</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addDecimal}>.</Button>\n            <Button handleClick={this.addZeroToInput}>0</Button>\n            <Button handleClick={this.evaluate}>=</Button>\n            <Button handleClick={this.subtract}>-</Button>\n          </div>\n          <div className=\"row\">\n            <ClearButton handleClear={this.clearInput}>Clear</ClearButton>\n          </div>\n        </div>\n      </div>\n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}